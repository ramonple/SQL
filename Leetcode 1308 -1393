-- 138. SQL 计算累计和 sum() over( partition by order by )
         for more details: https://www.cnblogs.com/mingdashu/p/12100734.html

-- 1321: Moving Average
         ROWS PRECEDING and ROWS FOLLOWING
         Preceding refers to rows before the current row, where the following argument refers to rows after the current row. 
         e.g., < ROWS BETWEEN 3 preceding and current row> - looks at three rows above the current row and current row -- MUST first 3 proceding and then current row

-- 1369 [Hard] -- 1.  add one column represents how many activity each user has
                  2.  use CASE WHEN in WHERE clause
                      select xxx
                      from table
                      where Case when xx then xx else xx end
                 
                 
-- 1384 [Hard] -- how to caculate the date difference
                        DATEDIFF(period_end, period_start)+1
                        

-- 1393!! how to calculate the sum according to different characteristics:
          SUM(CASE WHEN operation = 'Sell' THEN price ELSE (-1) * price END) AS capital_gain_loss




1308. Running Total for Different Genders [Medium]
-- Write an SQL query to find the total score for each gender at each day.
-- Order the result table by gender and day

select gender, day, SUM(score_points) OVER(PARTITION BY gender ORDER BY day) AS total -- why need the partition by? Cummulative sum
from scores 
group by day, gender
order by gender, day

-- problem with mistakes. According to the answer, it should be a cummulative score for each gender until that day.



-- 1321. Restaurant Growth [Medium]
-- You are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).
-- Write an SQL query to compute moving average of how much customer paid in a 7 days window (current day + 6 days before) .
-- Return result table ordered by visited_on.
-- average_amount should be rounded to 2 decimal places, all dates are in the format ('YYYY-MM-DD').

-- confused -- needs to really understand the requirement of this question
-- compute moving average of how much customer paid in a 7 days window ???!!!
WITH t AS
(
SELECT visited_on, 
ROW_NUMBER() OVER(ORDER BY visited_on) AS rn,
SUM(SUM(amount)) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND current row) AS amount
FROM Customer
GROUP BY visited_on
)

SELECT visited_on, amount, ROUND(amount/7,2) AS average_amount
FROM t
WHERE rn >= 7;

-- notice, there are more than one customers on 2019-01-10. 
-- if we direcly use sum, we will have two columns, it should be SUM( SUM(amount) )
-- ROW 6 PRECEDING

-- self join approach
select a.visited_on, 
    sum(b.amount) amount,
    round(sum(b.amount)/7,2) average_amount
from (select visited_on, sum(amount) amount from Customer GROUP BY visited_on) a, 
    (select visited_on, sum(amount) amount from Customer GROUP BY visited_on) b 
where datediff(a.visited_on,b.visited_on) between 0 and 6
group by a.visited_on
having count(distinct b.visited_on) = 7;



1322. Ads Performance [Easy]
-- A company is running Ads and wants to calculate the performance of each Ad.
-- Performance of the Ad is measured using Click-Through Rate (CTR) where:
-- Write an SQL query to find the ctr of each Ad.

select t.ad_id, IFNULL( ROUND(a.clicktime/b.totalTime,2),0) as ctr
from 
(select ad_id from Ads group by ad_id) as t
LEFT JOIN
( select ad_id, IFNULL(count(ad_id),0) as clicktime
from Ads
where action = 'Clicked'
group by ad_id) as a ON t.ad_id = a.ad_id
JOIN
( select ad_id, count(ad_id) as totalTime
from Ads
where action = 'Clicked' OR action = 'Viewed'
group by ad_id) as b
On a.ad_id = b.ad_id
order by ctr DESC, ad_id
-- WRONG!!! ad = 5 has 0 viewed + click. it is ignored

should use CASE WHEN:

SELECT ad_id,
CASE WHEN
SUM(CASE WHEN action IN ('Clicked', 'Viewed') THEN 1 ELSE 0 END) = 0 THEN 0
ELSE
ROUND(100 * SUM(CASE WHEN action = 'Clicked' Then 1 ELSE 0 END)/SUM(CASE WHEN action IN ('Clicked', 'Viewed') THEN 1 ELSE 0 END),2) 
END AS ctr
FROM Ads
GROUP BY ad_id
ORDER BY ctr DESC, ad_id;


select ad_id, (case when total = 0 THEN 0 ELSE  round(clocks*100/total,2) end) as ctr
from
(
select ad_id,
sum( CASE WHEN action = 'Clicked' then 1 else 0 end ) as clocks,
sum(CASE WHen action IN ('Clicked','Viewed') Then 1 else 0 end) as total
from Ads
group by ad_id ) as a
order by ctr desc, ad_id asc



-- 1327. List the Products Ordered in a Period [Easy]
-- Write an SQL query to get the names of products with greater than or equal to 100 units ordered in February 2020 and their amount.
select products.product_name, sum(orders.unit) as amount
from products JOIN orders
     ON products.product_id = orders.product_id
where order_date BETWEEN '2020-02-01' AND '2020-02-29'
group by products.product_name
Having amount>= 100




-- 1336. Number of Transactions per Visit [Hard]
-- transaction_count 是一次访问完成的交易数，取值区间为 0 至 一个或多个用户完成最多交易数（transactions_count）
-- visits_count 是一次访问银行交易次数为 transaction_count 的用户数。

-- A bank wants to draw a chart of the number of transactions bank visitors did in one visit to the bank 
-- and the corresponding number of visitors who have done this number of transaction in one visit.
-- Write an SQL query to find how many users visited the bank and didn't do any transactions, how many visited the bank and did one transaction and so on.

-- The result table will contain two columns:

-- transaction_count which is the number of transactions done in one visit.
-- visits_count which is the corresponding number of users who did transaction_count in one visit to the bank.
-- transaction_count should take all values from 0 to max(transaction_count) done by one or more users.

-- Order the result table by transaction_count.
select a.transaction_count, count(transaction_count) as visits_count
from 
(select v.user_id, v.visit_date,count(t.transaction_date) as transaction_count
from Visits as v LEFT JOIN transactions as t
     ON v.user_id = t.user_id AND v.visit_date = t.transaction_date
group by v.user_id,v.visit_date) as a
group by transaction_count

-- WRONG !! MISSTING TWO:
-- leetcode

WITH 
continuous AS (
SELECT ROW_NUMBER() OVER() AS transactions_count FROM Transactions
UNION 
SELECT 0 AS transactions_count
), -- how many transactions can we have. from 0 to the maximum row number of transaction

trans AS (
SELECT a.user_id, a.visit_date, 
IFNULL(COUNT(amount) OVER(PARTITION BY a.user_id, a.visit_date), 0) AS transactions_count
FROM Visits AS a
LEFT JOIN Transactions AS b
ON a.user_id = b.user_id AND a.visit_date = b.transaction_date
) -- how many transactions each user on each vist -- the one I obtained above

SELECT b.transactions_count, IFNULL(COUNT(DISTINCT a.user_id, a.visit_date), 0) AS visits_count
FROM trans AS a 
RIGHT JOIN continuous AS b
ON a.transactions_count = b.transactions_count
GROUP BY b.transactions_count
HAVING b.transactions_count <= (SELECT MAX(transactions_count) FROM trans)
ORDER BY 1;

-- here, we should focus on two essential points
-- a. when there is no transacions (have noticed)
-- b. during min ( transaction time) to max (transaction time), a internal time is skipped (haven't noticed)!!
    --> the  0<= possible transaction numbers <= row number of transation table 



-- 1341. Movie Rating [Medium]

-- Find the name of the user who has rated the greatest number of http://movies.In case of a tie, return lexicographically smaller user name.
-- Find the movie name with the highest average rating in February 2020.In case of a tie, return lexicographically smaller movie name.

(SELECT name AS results FROM Users AS a
JOIN Movie_Rating AS b
ON a.user_id = b.user_id
GROUP BY b.user_id
ORDER BY COUNT(DISTINCT movie_id) DESC, name 
LIMIT 1 )
UNION ALL
(SELECT title AS results FROM Movies AS a
JOIN Movie_Rating AS b
ON a.movie_id = b.movie_id
WHERE b.created_at Between '2020-02-02' and '2020-02-28'
GROUP BY b.movie_id
ORDER BY AVG(b.rating) DESC, title ASC
LIMIT 1);



-- 1350. Students With Invalid Departments [Easy]
-- Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exists.
SELECT a.id, a.name FROM Students AS a
LEFT JOIN Departments AS b
ON a.department_id = b.id
WHERE b.id iS NULL;


-- 1355. Activity Participants [Medium]
-- Write an SQL query to find the names of all the activities with neither maximum, nor minimum number of participants.
-- Return the result table in any order. Each activity in table Activities is performed by any person in the table Friends.

select tmp.name as Activitiy
from
( select a.id,a.name, count(f.id) as num
from Activities as a JOIN Friends as f
on a.name = f.activity
group by a.id, a.name
order by num ) as tmp
where tmp.num <>1
and tmp.num <>
(select count(name)
from Activities)
with 
temp AS
(select activity, COUNT(activity) as num
from Friends
Group by activity)

select activity from temp
where num!=(select max(num) from temp)
and num!=(select min(num) from temp)


1364. Number of Trusted Contacts of a Customer [Medium]
-- Write an SQL query to show the second most recent activity of each user.
-- If the user only has one activity, return that one.
-- A user can't perform more than one activity at the same time. Return the result table in any order.

WITH

tmp AS(
SELECT username, activity, startDate, endDate,
ROW_NUMBER() OVER(PARTITION BY username ORDER BY startDate DESC) AS rnk,
COUNT(activity) OVER(PARTITION BY username) AS num -- we can add this column
FROM UserActivity 
)

SELECT DISTINCT username, activity, startDate, endDate FROM tmp 
WHERE 
CASE WHEN num = 1 THEN rnk = 1
ELSE rnk = 2
END;

-- use CASE WHEN in WHERE clause

--- my code:
select a.username, a.activity, a.startDate, a.endDate
from
( select username, activity , startDate, endDate, rank() over (partition by username order by startDate DESC) as rk, count(activity) over(partition by username) as num
from UserActivity ) as a
where CASE WHEN num = 1 then rk = 1 else rk=2 end


-- 1378. Replace Employee ID w/ The Unique Identifier [easy]
-- Write an SQL query to show the unique ID of each user, If a user doesn't have a unique ID replace just show null.
select IFNULL (employeeUNI.unique_id,NULL),employees.name
from Employees LEFT JOIN employeeUNI
on employees.id=employeeUNI.id
order by name


-- 1384. Total Sales Amount by Year [Hard] !!!!!!!!!!!!!!!

- Write an SQL query to report the Total sales amount of each item for each year, 
-- with corresponding product name, product_id, product_name and report_year.
-- Dates of the sales years are between 2018 to 2020. Return the result table ordered by product_id and report_year.

WITH 

cte AS(
SELECT product_id, '2018' AS report_year,
       CASE
       WHEN period_start >= '2019-01-01' THEN 0
       WHEN period_end < '2019-01-01' AND period_start < '2019-01-01' THEN  DATEDIFF(period_end, period_start)+1 -- start and both in year 2018
       ELSE DATEDIFF('2019-01-01', period_start) -- start < 2019-01-01 and end >2019-01-01. Start in 2018 and does not end in 2018
       END AS days_in_year,
       average_daily_sales
FROM Sales 
    
UNION 
    
SELECT product_id, '2019' AS report_year,
       CASE
       WHEN period_start >='2020-01-01' THEN 0
       WHEN period_end < '2020-01-01' AND period_start > '2018-12-31' THEN  DATEDIFF(period_end, period_start)+1 -- start in year 2019 and ends in 2019
       WHEN period_end < '2020-01-01' AND period_start <= '2018-12-31' THEN DATEDIFF(period_end, '2018-12-31') -- start in 2018 adn ends in 2019
       WHEN period_end >= '2020-01-01' AND period_start > '2018-12-31' THEN  DATEDIFF('2020-01-01', period_start) -- does not end in 2019 and start in 2019
       ELSE DATEDIFF('2020-01-01', '2019-01-01') -- start in 2018 ends later 2019
       END AS days_in_year,
       average_daily_sales
FROM Sales 

UNION 
    
SELECT product_id, '2020' AS report_year,
       CASE
       WHEN period_start >= '2020-01-01' THEN  DATEDIFF(period_end, period_start)+1 -- start in 2020 and ends in 2020
       WHEN period_end <'2020-01-01' THEN 0 -- ends before 2020
       ELSE DATEDIFF(period_end, '2019-12-31') -- start before 2020 and ends in 2020
       END AS days_in_year,
       average_daily_sales
FROM Sales 
)

SELECT c.product_id, 
       p.product_name,  
       c.report_year,
       c.days_in_year*c.average_daily_sales AS total_amount
FROM cte AS c
JOIN Product AS p ON c.product_id = p.product_id 
WHERE c.days_in_year > 0
ORDER BY 1, 3;








-- 1393. Capital Gain/Loss [Medium]

-- Write an SQL query to report the Capital gain/loss for each stock.
-- The capital gain/loss of a stock is total gain or loss after buying and selling the stock one or many times.
-- Return the result table in any order.

select buy.stock_name, sell.earn-buy.pay as captical_gain_loss
from
( select a.stock_name as stock_name,sum(a.price) as pay
from 
(select stock_name, price
from Stocks
where operation='Buy') as a
group by  a.stock_name ) as buy
JOIN
(
select b.stock_name as stock_name,sum(b.price) as earn
from (
select stock_name, price
from Stocks
where operation='Sell') as b
group by b.stock_name) as sell
On buy.stock_name = sell.stock_name
order by captical_gain_loss DESC

-- My answer is too completed. 
-- from Leetcode: !!!
SELECT stock_name,
SUM(CASE WHEN operation = 'Sell' THEN price ELSE (-1) * price END) AS capital_gain_loss
FROM Stocks
GROUP BY stock_name;

