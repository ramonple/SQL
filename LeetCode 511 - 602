IMPORTANT: How to get the cumulative sum? -- > 534,571. a. wind function SUM b. Self-Join
                                              a. SUM (column name) OVER (partition by. order by)
                                              b. select xxx from table t1, table t2 ON t1.id=t2.id AND t1.id>=t2.id
           How to find the median value? 569, 571 (please refer to the end)
	   
	   602: How to deal with the double-directed problem -> UNION : same # of columns, same column name
           601 : another approach of dealing with continuous date that satisfies some conditions

511 Game Play Analysis I [Easy]
Write an SQL query that reports the first login date for each player.

- know we can directly use Min(Date()),Max(Date())

select player_id, Min( Date(event_date)) As first_login
from Activity
Group by player_id


512 Game Play Analysis II [Easy]
Write a SQL query that reports the device that is first logged in for each player.

My way:
select player_id, device_id
from activity
where (player_id,event_date) IN (
select player_id, Min(date(event_date)) As first_login
from activity
group by player_id );

We can also use the window functio

select player_id,device_id
from (select player_id, device_id, Rank () Over (partition by player_id Order by event_date) As firstDay
from activity ) as a
where firstDay = 1


534 Game Play Analysis III [Medium]
-- Write an SQL query that reports for each player and date, how many games played so far by the player. 
-- That is, the total number of games played by the player until that date. Check the example for clarity.

-- importance!! how to understand this question. It is asking for the cummulative time.

a. To calculate the cummulative sum, Using Sum () Function with Over () Clause :
select player_id,event_date,sum(games) Over (partition by player_id order by event_date) as game_played_so_far
from activity

b. Using sel-join
select a.player_id, a.event_date,sum(b.games)
from activity a join activity b
on a.player_id = b.player_id
where a.event_date >= b.event_date
group by a.player_id, a.event_date
order by a.player_id;

550 Game Play Analysis IV [Medium]
Write an SQL query that reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. 
In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, 
then divide that number by the total number of players.

a. -- aggreate function and group 
  -- similar to my idea, we first find the first login date of each player and then check whether they log in on the following day
SELECT ROUND(COUNT(DISTINCT b.player_id)/COUNT(DISTINCT a.player_id), 2) AS fraction 
FROM Activity AS a LEFT JOIN (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) AS b
ON a.player_id = b.player_id
AND DATEDIFF(a.event_date, b.first_login) = 1 ## can also use DATE_ADD(b.first_login,INTERVAL 1 DAY) = a.event_date

b. -- FIRST_VALUE() Window Function. (not use MIN but the FIRST_VALUE window function).  ## First_Value(column name) OVER (partition by order by)
SELECT ROUND(COUNT(DISTINCT b.player_id)/COUNT(DISTINCT a.player_id), 2) AS fraction FROM Activity AS a
LEFT JOIN
(SELECT player_id, FIRST_VALUE(event_date) OVER(PARTITION BY player_id ORDER BY event_date) AS first_login FROM Activity) AS b
ON a.player_id = b.player_id
AND DATEDIFF(a.event_date, b.first_login) = 1. 

569 Median Employee Salary [Hard]
!!! how to find the median
-- when there is n of values in total, the median should be 
-- n is odd, median = (n+1)/2 th observation
-- n is even median = 1/2 (n/2 th observation + (n/2 + 1)th obervation)

-- so if when we have the rank
-- we should find the rank of the median
-- if intotal there are n values, the median should be Where n/2 <= THIS <= n/2 + 1;
-- OR  -- where rno in (ceil(cnt/2), cnt/2 + 1);

select id, company, salary
from
(
  select id, company, salary, 
         row_number() over(partition by company order by salary) as rno, -- the rank of each salary in each company
         count(*) over(partition by company) as cnt -- how many staff in each company
  from Employee
) x
WHERE (cnt/2) <= rno AND rno<= (cnt/2) + 1;  -- where rno in (ceil(cnt/2), cnt/2 + 1)


-- 570. Managers with at Least 5 Direct Reports

select name
from employee
where id IN
(select managerid from employee 
group by managerid
Having count(managerID) >= 5 )

-- 571 Find Median Given Frequency of Numbers [Hard]
  -- QUESTION: How to get the cummulative sum?

SELECT  AVG(Number) AS median
From
(select *, SUM(Frequency) OVER (ORDER BY Number) AS cum_sum, 
          (sum(frequency) Over () / 2) As mid
FROM Numbers ) as T

Where mid BETWEEN cum_sum - frequency AND cum_sum;
-- cum_sum caculate the number is from which position
-- 5<= mid <= 9, the corresponding number starts from 5th and ends at 9th
-- Use Average to deal with the condition when the number of numbers is event. the median should be 1/2 (x1+x2)


---------------------------How to get the median in SQL-----------------------------------

a. ( Max of Bottom Half + Min of Top Half ) / 2

SELECT
(
 (SELECT MAX(Score) FROM
   (SELECT TOP 50 PERCENT Score FROM Posts ORDER BY Score) AS BottomHalf)
 +
 (SELECT MIN(Score) FROM
   (SELECT TOP 50 PERCENT Score FROM Posts ORDER BY Score DESC) AS TopHalf)
) / 2 AS Median

-- asscending order: upper 50%. -> The maximum of the Bottom Half
-- descending order: upper 50%. -> The minimum of the Top Half

b. RANK 
Rank the corresponding the values in the column as 'RANK'
calculate how many numbers are there in total as 'Total'
We want     Total/ 2 <= RANK <= Total/2 + 1. OR RANK IN (ceil(Total/2), Total/2 + 1)

------- Use Frequency to find the median
a. calculate the cummulative frequency As 'cum_fre'
b. find the mid postion -> Sum(frequency) / 2 AS 'mid'
Where mid BETWEEN cum_fre - fre AND cum_fre

----------------------------------------------------------------------------------

574 Winning Candidate [Medium]

-- problem is how to read the vote table. id is the one who votes, and candidate id is the one who gets the vote.
-- for example, id=1 votes to candidate 2.

-- approach 1
Select Name
From Candidate JOIN
(select CandidateId, COUNT(*)
From VOTE
group by CandidateID
Order by COUNT(*) DESC
LIMIT 1 ) As A
ON Candidate.id=A.candidateid

-- approach 2
select Name
From Candidate
WHere id =
(select CandidateId
From VOTE
group by CandidateID
Order by COUNT(*) DESC
LIMIT 1 )


-- 577 Employee Bonus [Easy]
-- Select all employee's name and bonus whose bonus is < 1000.
select employee.name,bonus.bonus
from Employee LEFT JOIN bonus ON employee.empid=bonus.empId
where employee.empid NOT IN (
select empid from Bonus
where bonus >= 1000);

-- Not sure what I am doing here is correct or not. OR I need to let SQL to output null if there doesn't exist the value.
a. 
select employee.name, IFNULL(bonus.bonus, null) As Bonus
from Employee LEFT JOIN bonus ON employee.empid=bonus.empId
where employee.empid NOT IN (
select empid from Bonus
where bonus >= 1000);

b. 
SELECT a.name, 
b.bonus
FROM Employee AS a
LEFT JOIN Bonus AS b
ON a.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL; -- different idea. Here it want to find the id whether with bonous < 1000 Or NULL


-- 578 Get Highest Answer Rate Question [Medium]
Write a sql query to identify the question which has the highest answer rate.
Note:The highest answer rate meaning is: answer number's ratio in show number in the same question.

-- approach 1
SELECT question_id AS 'survey_log' -- Leetcode asks for the column name 'survey_log'
FROM survey_log
GROUP BY question_id
ORDER BY COUNT(answer_id)/ COUNT(IF(action = 'show', 1, NULL)) DESC.  -- clever approach to calculate how many times this question has been answered
LIMIT 1;
OR 
select question_id as 'survery_log'
from survey_log
group by question_id
Order by COUNT(answer_id) / SUM(CASE WHEN action = 'show' THEN 1 ELSE 0 END) DESC
LIMIT 1

-- approach 2
SELECT question_id AS survey_log
FROM
(SELECT question_id,
        SUM(case when action="answer" THEN 1 ELSE 0 END) AS num_answer,
        SUM(case when action="show" THEN 1 ELSE 0 END) AS num_show  
	FROM survey_log
	GROUP BY question_id
) AS tbl
ORDER BY (num_answer / num_show) DESC
LIMIT 1

-- TAKE AWAY: two approaches to find the percentage; Use LIMIT 1 to find the MIN or MAX (with desc)



579 Find Cumulative Salary of an Employee [Hard]

-- Write a SQL to get the cumulative sum of an employee's salary over a period of 3 months but exclude the most recent month.
-- The result should be displayed by 'Id' ascending, and then by 'Month' descending.

SELECT E1.id, E1.month,
(IFNULL(E1.salary, 0) + IFNULL(E2.salary, 0) + IFNULL(E3.salary, 0)) AS Salary
FROM
(
SELECT id, MAX(month) AS month FROM Employee
GROUP BY id
HAVING COUNT(*) > 1
) AS maxmonth
LEFT JOIN Employee AS E1 
ON (maxmonth.id = E1.id AND maxmonth.month > E1.month). -- E1 includes everthing expect the latest month (what we want to delete)
LEFT JOIN Employee AS E2 
ON (E2.id = E1.id AND E2.month = E1.month - 1)
LEFT JOIN Employee AS E3 
ON (E3.id = E1.id AND E3.month = E1.month - 2)
ORDER BY id ASC, month DESC;

-- why we should use left join?
-- first, we find the payment of latest month of each employee. For example, this month is April, and we have 3 employees,
--  they are a,b,and c. For a, the lastest is 4 (april), for B is 3 (march) and 2 (Feb) for c.
--  If this is the case, for a we should ignore the payment made in april. However, we cannot do this for b and c. As they
-- do not get payment on the lasest month. Thus, we should keep all of them => That is why we should use LEFT JOIN

- Classical approach to calculate the cummulative sth is the SELF JOIN (which is shown as LEFT JOIN here)
- we only need to consider the magnitude relationship, e.g., a.id = b.id AND a.month=b.month+1



580 Count Student Number in Departments [Medium]

-- Write a query to print the respective department name and number of students majoring in each department 
-- for all departments in the department table (even ones with no current students).

select a.dept_name, count(b.student_id) as student_number
from department as a LEFT JOIN student as b
on a.dept_id=b.dept_id
group by a.dept_name
order by student_number DESC,
a.dept_name;




-- 584 Find Customer Referee
select id,name
from customer
where referee_id <> 2 OR referee_id IS NULL

This question is easy. But we should notice the where condition. if we only set referee_id <> 2, the null will be ignored.
Thus we should add one more condition  ' OR ' 'referre IS NULL'

-- 585 Investments in 2016 [Medium]

-- Write a query to print the sum of all total investment values in 2016 (TIV_2016), 
-- to a scale of 2 decimal places, for all policy holders who meet the following criteria:

-- Have the same TIV_2015 value as one or more other policyholders.
-- Are not located in the same city as any other policyholder (i.e.: the (latitude, longitude) attribute pairs must be unique).


select  ROUND(sum(TIV_2016),2 ) as TIV_2016
from insurance
where insurance.TIV_2015 IN
(select TIV_2015 FROM insurance
GROUP by TIV_2015
Having Count(TIV_2015) > 1 )
AND  CONCAT (LAT,",",LON) IN
(select concat (LAT,",",LON) FROM insurance
group by LAT,LON
HAVING COUNT(*) = 1 );

-- we can split the questions into two conditions (just refer to the question part).
-- first find out unquie TIV_2015 investment.

select TIV_2015,count(*)
from insurance
group by TIV_2015
HAVING count(*)>1 -- we know it is 10.00 which appears 3 times

Then, we have to find unique location of each customer. Here the location should be LAN + LON.
Know how to use CONCAT !!!
However if we have lan=10,lon13, Contact(lan,lon)=1013. = lon=101,lon=3, thus we use CONCAT(LAN,",",LON) here

select concat(lat,",",lon)
from insurance
group by lat,lon
Having count(*) = 1

-- 586 Customer Placing the Largest Number of Orders [Easy]

-- 595 Big Countries [Easy]
-- A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.
-- Write a SQL solution to output big countries' name, population and area.

select population,area
from world
where population > 2500000 OR area>3000000

-- we can also use UNION to do this

select name,population,are
from world
where area > 3000000
UNION
select name,population,area
from world
where population > 2500000




-- 596 Classes More Than 5 Students [Easy]
-- Please list out all classes which have more than or equal to 5 students.
-- Note: The students should not be counted duplicate in each course

select class
from courses
group by class
having count(DISTINCT student) >= 5

-- NOTICE: how to deal with the DISTINCT

-- SUBQUERY METHOD:
select class FROM
(
select class,count(distinct student) as num
from courses
group by class ) as temp_table
from temp_table.num>= 5

-- 597 Friend Requests I: Overall Acceptance Rate [Easy]

-- Write a query to find the overall acceptance rate of requests rounded to 2 decimals, 
-- which is the number of acceptance divides the number of requests.

-- Note:

-- The accepted requests are not necessarily from the table friend_request. In this case, you just need to simply count the total accepted requests 
-- (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.
-- It is possible that a sender sends multiple requests to the same receiver, and a request could be accepted more than once. 
-- In this case, the ‘duplicated’ requests or acceptances are only counted once.
-- If there is no requests at all, you should return 0.00 as the accept_rate.

SQL WITH caluse: The SQL WITH clause allows you to give a sub-query block a name (a process also called sub-query refactoring), which can be referenced in several places within the main SQL query. 

WITH 
tr AS (
	-- total unique sent requests
    SELECT COUNT(sender_id) AS tot_req FROM(
    SELECT sender_id
    FROM friend_request
    GROUP BY sender_id, send_to_id) AS t1 
),

ta AS (
	-- total unique accepted requests
    SELECT COUNT(request_id) AS tot_act FROM  (
    SELECT request_id
    FROM request_accepted
    GROUP BY request_id, accept_id) AS t2
)

SELECT ROUND(IFNULL(ta.tot_act / tr.tot_req,0),2) AS accept_rate
FROM tr, ta;

-- should be familiar with WITH caluse. 
-- With A as (), B as(). select A.xxx, B.xxx from A,B. --> directly from A,B. NO JOIN!!!



-- 602 Friend Requests II: Who Has the Most Friends [Medium] !!!

-- Write a query to find the the people who has most friends and the most friends number under the following rules:

-- It is guaranteed there is only 1 people having the most friends.
-- The friend request could only been accepted once, which mean there is no multiple records with the same requester_id and accepter_id value.

-- NOTICE: this should be a double direction!!! one can be the requester and accepter at the same time.

SELECT c.people as id, SUM(c.cnt) AS num
FROM (
SELECT requester_id AS people, COUNT(DISTINCT accepter_id) AS cnt
FROM request_accepted
GROUP BY requester_id

UNION ALL    --   UNION removes duplicate records (where all columns in the results are the same), UNION ALL does not.

SELECT accepter_id AS people, COUNT(DISTINCT requester_id) AS cnt
FROM request_accepted
GROUP BY accepter_id 
) AS c    -- using UNION we directly combine two tables. THUS they should have the same number of columns with same names

GROUP BY c.people
ORDER BY SUM(c.cnt) DESC
LIMIT 1;


Differences between UNION and UNION ALL with figures : https://dataschool.com/learn-sql/what-is-the-difference-between-union-and-union-all/




-- 601 Human Traffic of Stadium [Hard]
-- Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).
-- Note: Each day only have one row record, and the dates are increasing with id increasing.

-- leetcode answer:
WITH 
tmp AS (
SELECT a.vist_date AS date1, b.vist_date AS date2, c.vist_date AS date3
FROM stadium AS a  LEFT JOIN stadium AS b ON b.id = a.id + 1      -- it should be left join, because the earlist table will have more information
                   LEFT JOIN stadium AS c ON c.id = a.id + 2
WHERE a.people >= 100 AND b.people >= 100  AND c.people >= 100),

temp1 AS (
select date1 AS total_date FROM tmp
UNION 
select date2 AS total_date from tmp
UNION 
select date3 AS total_date from tmp
)  -- UNION will delete the duplicated information

select * From Stadium
where vist_date IN (select * from temp1);


-- take away:
the main difference between this question and previous ones are the id and event_date. Here, id can also represent the date. 
In previuos conditions, we should do: DATE_ADD(a.event_date,INTERVAL 1 DAY) = b.event_date.

In this question, as we want to check for contiuous three days. We should find three columns. One ends day 0 (today), the other ends yesterday (day -1), and the other ends the day before yesterday (day -2).
THUS we have:

select a.vist_date as day1, b.vist_date as day2 ,c.vist_date as day3
from stadium a LEFT JOIN stadium b ON a.id=b.id-1
               LEFT JOIN stadium c ON a.id=c.id-2
-- the output:
DAY 1            DAY 2          DAY 3
2017-01-01	2017-01-02	2017-01-03
2017-01-02	2017-01-03	2017-01-04
2017-01-03	2017-01-04	2017-01-05
2017-01-04	2017-01-05	2017-01-06
2017-01-05	2017-01-06	2017-01-07
2017-01-06	2017-01-07	2017-01-08
2017-01-07	2017-01-08	
2017-01-08		

We should add the condition: the people >= 100

select a.vist_date as day1, b.vist_date as day2 ,c.vist_date as day3
from stadium a LEFT JOIN stadium b ON a.id=b.id-1. -- a is one day earlier than b
               LEFT JOIN stadium c ON a.id=c.id-2. -- a is two days earlier than c
Where a.people >= 100 AND b.people >= 100 AND	c.people >= 100       

-- out put:
DAY 1           DAY 2           DAY 3
2017-01-05	2017-01-06	2017-01-07
2017-01-06	2017-01-07	2017-01-08

KNOW we want to combine these three columns into one column and delete the duplicated rows, thus we should use UNION
we call the table we get above as 'tmp'

WITH 
tmp as 

( select a.vist_date as day1, b.vist_date as day2 ,c.vist_date as day3
from stadium a LEFT JOIN stadium b ON a.id=b.id-1
               LEFT JOIN stadium c ON a.id=c.id-2
Where a.people >= 100 AND b.people >= 100 AND	c.people >= 100) 
,
temp1 AS
( select date1 AS total_date FROM tmp
    UNION 
select date2 AS total_date from tmp
   UNION 
select date3 AS total_date from tmp
)                                       -- UNION will delete the duplicated information

Thus we will have (not output by SQL, I write it by myself):

total_date (if UNION ALL)
2017-01-05	
2017-01-06	
2017-01-06	
2017-01-07
2017-01-07
2017-01-08


total_date (if UNION)
2017-01-05	
2017-01-06		
2017-01-07
2017-01-08       -- we know on these continuous four days, we have people >= 100

we want to get the date which belongs to the date shown in temp1

select *
from stadium
where evnet_date IN (select total_date from temp1)

As we have the code shown above


