-- 1435 IMPORTANT!!!

-- 1140: Interesting. Compare the values in different conditions

-- 1454: How to check the consecutive days ??????

-- 1459: Initially, I cannot understand this question

-- 1479: DAYOFWEEK (2=monday, ..., 1 = sunday)

-- 1484: Group_Concat()
         MySQL GROUP_CONCAT() function returns a string with concatenated non-NULL value from a group.
 
--1495  when the day time with time: 2020-06-20 12:00, how should we get the year and month?
        LEFT('2020-06-20 12:00',7) 


-- 1517 -- REGEXP is the operator used when performing regular expression pattern matches.
                                                -- ^ caret(^) matches Beginning of string
						-- $ End of string
						-- [A-Z]  match any upper case letter.
						-- [a-z]  match any lower case letter
						-- [0-9]  match any digit from 0 through to 9.
						-- *	Zero or more instances of string preceding it
-- matches any of the patterns p1, p2, or p3 (p1|p2|p3):
-- Gives all the names containing ‘be’ or ‘ae’.Example – Abel, Baer.   -- SELECT name FROM student_tbl WHERE name REGEXP 'be|ae' 

-- Matches any character listed between the square brackets ([abc]):
-- Gives all the names containing ‘j’ or ‘z’.Example – Lorentz, Rajs.  SELECT name FROM student_tbl WHERE name REGEXP '[jz]' ;



1398. Customers Who Bought Product A and B but Not C [Medium]

-- Write an SQL query to report the customer_id and customer_name of customers who bought products 
-- "A", "B" but did not buy the product "C" since we want to recommend them buy this product.
-- Return the result table ordered by customer_id.

-- my answer
select  DISTINCT Customers.customer_name, Customers.customer_id
from Customers JOIN orders On Customers.customer_id = Orders.customer_id
where customers.customer_id IN (
select customer_id 
from Orders 
where product_name = 'A' )
AND customers.customer_id IN (
select customer_id 
from Orders 
where product_name ='B')
AND customers.customer_id NOT IN
(
select customer_id 
from Orders 
where product_name = 'C')

-- leetcode
SELECT c.customer_id, c.customer_name
FROM customers AS c
WHERE EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'A')
AND EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'B')
AND NOT EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'C')
ORDER BY c.customer_id;

-- 1407. Top Travellers [Easy]
-- Write an SQL query to report the distance travelled by each user.
-- Return the result table ordered by travelled_distance in descending order, 
-- if two or more users travelled the same distance, order them by their name in ascending order.

SELECT a.name, IFNULL(SUM(b.distance), 0) as travelled_distance -- NOTICE: IFNULL
FROM Users AS a
LEFT JOIN Rides AS b ON a.id = b.user_id
GROUP BY a.name
order by travelled_distance DESC,a.name


-- 1412. Find the Quiet Students in All Exams [Hard]

-- A "quite" student is the one who took at least one exam and didn't score neither the high score nor the low score.

-- Write an SQL query to report the students (student_id, student_name) being "quiet" in ALL exams.

-- Don't return the student who has never taken any exam. Return the result table ordered by student_id.


select student_id, student_name
from student
where student_id NOT IN (
select distinct student_id
from
( select  student_id, rank() over (partition by exam_id order by score) as rk
from Exam) as bottom
where bottom.rk=1) 
AND student_id NOT IN (
select distinct student_id
from
( select  student_id, rank() over (partition by exam_id order by score DESC) as rp
from Exam) as top
where top.rp=1)
AND student_id IN 
(
select student_id
from Exam
group by student_id
having count(student_id) > 0 ) 

--leetcode
WITH

tmp AS (
SELECT exam_id, student_id, score,
MAX(score) OVER(PARTITION BY exam_id) AS max_score,
MIN(score) OVER(PARTITION BY exam_id) AS min_score
FROM Exam
),

tmp1 AS (
SELECT DISTINCT a.student_id, a.student_name FROM Student AS a
JOIN tmp AS b
ON a.student_id = b.student_id
WHERE b.score = b.max_score OR b.score = b.min_score

)

SELECT DISTINCT a.student_id, a.student_name FROM Student AS a
JOIN Exam AS b
ON a.student_id = b.student_id
WHERE a.student_id NOT IN (SELECT student_id FROM tmp1)
ORDER BY a.student_id;



-- 1435. Create a Session Bar Chart [Easy]

-- You want to know how long a user visits your application. 
-- You decided to create bins of "[0-5>", "[5-10>", "[10-15>" and "15 minutes or more" and count the number of sessions on it.
-- Write an SQL query to report the (bin, total) in any order.

WITH 

tmp AS (
SELECT session_id, duration,
CASE WHEN duration/60 < 5 THEN '[0-5>'
     WHEN duration/60 >=5 AND duration/60 < 10 THEN '[5-10>'
     WHEN duration/60 >=10 AND duration/60 < 15 THEN '[10-15>'
     ELSE '15 or more'
     END AS bin
FROM Sessions
),

tmp1 AS (
SELECT '[0-5>' AS bin
UNION
SELECT '[5-10>' AS bin
UNION
SELECT '[10-15>' AS bin
UNION
SELECT '15 or more' AS bin
)

SELECT a.bin, IFNULL(COUNT(b.session_id),0) AS total
FROM tmp1 AS a
LEFT JOIN tmp AS b
ON a.bin = b.bin
GROUP BY a.bin;



-- 1440. Evaluate Boolean Expression [Medium]
-- Write an SQL query to evaluate the boolean expressions in Expressions table.

-- Return the result table in any order.

-- The query result format is in the following example.


-- Have NO idea
SELECT a.left_operand, a.operator, a.right_operand, 
CASE WHEN b.value > c.value AND a.operator = '>' THEN 'true'
WHEN b.value = c.value AND a.operator = '=' THEN 'true'
WHEN b.value < c.value AND a.operator = '<' THEN 'true'
ELSE 'false' END AS value
FROM Expression AS a
LEFT JOIN Variables AS b ON a.left_operand = b.name
LEFT JOIN Variables AS c ON a.right_operand = c.name;


-- 1445. Apples & OrangesS
-- Write an SQL query to report the difference between number of apples and oranges sold each day.

-- Return the result table ordered by sale_date in format ('YYYY-MM-DD').
SELECT a.sale_date, a.sold_num-b.sold_num as diff
FROM (
SELECT sale_date, fruit, sold_num FROM Sales
WHERE fruit = 'apples'
) AS a
LEFT JOIN (
SELECT sale_date, fruit, sold_num FROM Sales
WHERE fruit = 'oranges'
) AS b
ON a.sale_date = b.sale_date
order by a.sale_date


-- 1454. Active Users [Medium]

-- Write an SQL query to find the id and the name of active users.

-- Active users are those who logged in to their accounts for 5 or more consecutive days.

-- Return the result table ordered by the id.

WITH

tmp AS(
SELECT a.id, a.name, b.login_date,
ROW_NUMBER() OVER(PARTITION BY a.id ORDER BY b.login_date) AS rnk, 
DATEDIFF(b.login_date, '2020-01-01') AS diff 
FROM Accounts AS a
LEFT JOIN (
SELECT DISTINCT id, login_date FROM Logins
) AS b
ON a.id = b.id
)

SELECT DISTINCT id, name FROM tmp
GROUP BY id, name, diff-rnk -- use diff-rank to check whether continuous or not
HAVING COUNT(login_date) >= 5;


-- 1459. Rectangles Area [Medium]

-- Write an SQL query to report of all possible rectangles which can be formed by any two points of the table.
-- Each row in the result contains three columns (p1, p2, area) where:
-- p1 and p2 are the id of two opposite corners of a rectangle and p1 < p2.
-- Area of this rectangle is represented by the column area.
-- Report the query in descending order by area in case of tie in ascending order by p1 and p2.


-- p1 should be less than p2 and area greater than 0.
-- p1 = 1 and p2 = 2, has an area equal to |2-4| * |8-7| = 2.
-- p1 = 2 and p2 = 3, has an area equal to |4-2| * |7-10| = 6.
-- p1 = 1 and p2 = 3 It's not possible because the rectangle has an area equal to 0-- .



-- Initially, I cannot understand this question
SELECT a.id AS p1, b.id AS p2, 
ABS(a.x_value - b.x_value) * ABS(a.y_value - b.y_value) AS area
FROM Points AS a
LEFT JOIN Points AS b
ON a.id < b.id
WHERE ABS(a.x_value - b.x_value) <> 0 
AND ABS(a.y_value - b.y_value) <> 0
ORDER BY area DESC, p1, p2;


-- 1468. Calculate Salaries [Medium]

-- Write an SQL query to find the salaries of the employees after applying taxes.
-- The tax rate is calculated for each company based on the following criteria:

-- 0% If the max salary of any employee in the company is less than 1000$.
-- 24% If the max salary of any employee in the company is in the range [1000, 10000] inclusive.
-- 49% If the max salary of any employee in the company is greater than 10000$.
-- Return the result table in any order. Round the salary to the nearest integer.

select company_id, employee_id,employee_name,
( CASE WHEN salary <= 1000 Then salary
     WHEN salary <= 10000 Then salary*(1-0.24)
		 ELSE  salary * (1-0.49) END ) as salary 
from Salaries
order by company_id, employee_id

-- WRONG! bu company!!!
-- the answer from leetcode is evey smart, we can add one more column which represent the maximum salary of this company
WITH

tmp AS (
SELECT company_id, employee_id, employee_name, salary, 
MAX(salary) OVER(PARTITION BY company_id) AS max_sal
FROM Salaries   
)

SELECT company_id, employee_id, employee_name,
CASE WHEN max_sal < 1000  THEN ROUND(salary) 
WHEN max_sal BETWEEN 1000 AND 10000 THEN ROUND(salary * (1-0.24))
ELSE ROUND(salary * (1-0.49))
END AS salary
FROM tmp;

-- My new answer:
select a.company_id, a.employee_id,a.employee_name,
( CASE WHEN max_sal <= 1000 Then round(salary)
     WHEN max_sal <= 10000 Then round(salary*(1-0.24))
		 ELSE  round(salary * (1-0.49)) END ) as salary 
from (
select company_id,employee_id,employee_name, salary, MAX(salary) OVER(PARTITION BY company_id) AS max_sal
from salaries) as a
order by company_id, employee_id





-- 1479. Sales by Day of the Week [Hard]

-- You are the business owner and would like to obtain a sales report for category items and day of the week.
-- Write an SQL query to report how many units in each category have been ordered on each day of the week.
-- Return the result table ordered by category.

-- get the day of the week

Select a.item_category as category,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =2 THEN b.quantity ELSE 0 END) as MONDAY,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =3 THEN b.quantity ELSE 0 END) as Tuesday,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =4 THEN b.quantity ELSE 0 END) as Wednesday,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =5 THEN b.quantity ELSE 0 END) as Thursday,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =6 THEN b.quantity ELSE 0 END) as Friday,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =7 THEN b.quantity ELSE 0 END) as Saturday,
SUM( CASE WHEN DAYOFWEEK(b.order_date) =1 THEN b.quantity ELSE 0 END) as Sunday
from items AS a LEFT JOIN Orders as b
on a.item_id=b.item_id
group by a.item_category
order by  a.item_category




-- 1484. Group Sold Products By The Date [Easy]

-- Write an SQL query to find for each date, the number of distinct products sold and their names.
-- The sold-products names for each date should be sorted lexicographically.
-- Return the result table ordered by sell_date.

select sell_date,count(distinct product),GROUP_CONCAT(DISTINCT product ORDER BY product) AS products
from Activities
group by sell_date





-- 1495. Friendly Movies Streamed Last Month [Easy]
-- Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
-- Return the result table in any order.
select DISTINCT a.title
FROM Content AS a
JOIN TVProgram AS b
ON a.content_id = b.content_id
where a.Kids_content ='Y' and a.content_type='Movies' AND LEFT(b.program_date,7) ='2020-06'






-- 1501. Countries You Can Safely Invest In [Medium]

-- A telecommunications company wants to invest in new countries. The company intends to invest in the countries where the average call duration of the calls in this country is strictly greater than the global average call duration.
-- Write an SQL query to find the countries where this company can invest.
-- Return the result table in any order.

WITH  

tmp AS (
SELECT caller_id AS call_id, duration FROM (
SELECT DISTINCT caller_id, callee_id, duration FROM Calls
) AS a
UNION ALL
SELECT callee_id AS call_id, duration FROM (
SELECT DISTINCT caller_id, callee_id, duration FROM Calls
) AS b)

SELECT a.name AS country FROM Country AS a
LEFT JOIN Person AS b
ON a.country_code = LEFT(b.phone_number, 3)
LEFT JOIN tmp AS c
ON b.id = c.call_id
GROUP BY a.name
HAVING AVG(c.duration) > (SELECT AVG(duration) FROM tmp);








-- 1511. Customer Order Frequency [Easy]

-- Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.
-- Return the result table in any order.


-- my answer 
select a.customer_id,a.name
from 
(
(select c.customer_id,c.name
from Orders as o JOIN Customers as c on c.customer_id= o.customer_id
                 JOIN Product as p on p.product_id=o.product_id
where o.order_date BETWEEN '2020-06-01' AND '2020-06-30'
group by c.customer_id,c.name
HAVING sum(o.quantity * p.price) >= 100) as a
JOIN
(select c.customer_id,c.name
from Orders as o JOIN Customers as c on c.customer_id= o.customer_id
                 JOIN Product as p on p.product_id=o.product_id
where o.order_date BETWEEN '2020-07-01' AND '2020-07-31'
group by c.customer_id,c.name
HAVING sum(o.quantity * p.price) >= 100) as b
ON a.customer_id = b.customer_id 
) 



-- leetcode:
select customer_id,name from customers
where customer_id IN
(SELECT a.customer_id 
FROM Orders AS a JOIN Product AS b
ON a.product_id = b.product_id
WHERE a.order_date BETWEEN '2020-06-01' AND '2020-06-30'
GROUP BY a.customer_id
HAVING SUM(a.quantity * b.price) >= 100
)
AND customer_id IN
(SELECT a.customer_id 
FROM Orders AS a JOIN Product AS b
ON a.product_id = b.product_id
WHERE a.order_date BETWEEN '2020-07-01' AND '2020-07-31'
GROUP BY a.customer_id
HAVING SUM(a.quantity * b.price) >= 100
)



-- 1517. Find Users With Valid E-Mails [Easy]


-- Write an SQL query to find the users who have valid emails.
-- A valid e-mail has a prefix name and a domain where:
-- The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.' and/or dash '-'. The prefix name must start with a letter.
-- The domain is '@leetcode.com'.

-- my answer, HAVE NO idea how to check whehter starts with letter
select userid,name,mail
from Users
where mail LIKE '%@leetcode%' 

-- leetcode
SELECT * FROM users
WHERE mail REGEXP '^[A-Za-z][a-zA-Z0-9_.-]*@leetcode.com$' -- REGEXP is the operator used when performing regular expression pattern matches.
-- NOTICE the * 

                                                -- ^ caret(^) matches Beginning of string
						-- $ End of string
						-- [A-Z]  match any upper case letter.
						-- [a-z]  match any lower case letter
						-- [0-9]  match any digit from 0 through to 9.





-- 1527. Patients With a Condition [Easy]

-- Write an SQL query to report the patient_id, patient_name all conditions of patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix

select *
from Patients
where conditions REGEXP 'DIAB1'

select  *
from patients
where conditions LIKE '%DIAB1%'




