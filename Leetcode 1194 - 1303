-- 1194. SUM() OVER (order by)

-- 1204 a. SUM() OVER (partition by ... order by ...)
        b. In With .. as ,.. as caluse, the second one can directly use the first one !!!
           With tmp as (), tmp1 as (select xxx from tmp )
        c. how to use "rank number' to determine the one satisfies the condition
        
-- 1125: [HARD] how to calculate the start and end data for a continuous time period!!!
                CASE When State = 'a' THEN DateDiff( datelist, '2019-01-01') - row_number() Over (Partition BY state Ordery by datelist) as group_rnk
        
	Then use First Value () OVER ( Parition by group_rnk Order by datelist) as start_date
                 First Value () OVER ( Parition by group_rnk Order by datelist DESC ) as end_date. 
		  
-----------> 1285 also for continuous data and find the start and end dates
---> TIPS: MUST use select DISTINCT!!!! 
 
-- 1280 !! How to use Cross JOIN > FROM a CROSS JOIN b.   DOES NOT NEED ON xxxx

-- 1303:  if we want to know how many members in a group, and show the employees and their corresponding team's size.
          we should SELECT employee_id, COUNT(employee_id) OVER(Partition By team)
	            FROM table






-- 1194. Tournament Winners [Hard]

-- The winner in each group is the player who scored the maximum total points within the group. In the case of a tie, the lowest player_id wins.

-- Write an SQL query to find the winner in each group.

-- my code: cannot run
select  match_id, ( case when first_score > second_score then first_player 
              when first_score < second_score then second_player
						 else min(first_player,second_player) end ) as player_id
from matches
group by match_id

-- we need to focus on the sum scores of each player, instead of in each match

-- leetcode:
SELECT group_id, player_id FROM (
SELECT a.group_id, a.player_id,
ROW_NUMBER() OVER(PARTITION BY a.group_id ORDER BY IFNULL(b.score,0) DESC, a.player_id) AS rnk
FROM Players AS a
LEFT JOIN (
SELECT player_id, SUM(score) AS score FROM (
SELECT match_id, first_player AS player_id, first_score AS score
FROM Matches
UNION ALL
SELECT match_id, second_player AS player_id, second_score AS score
FROM Matches
) AS x
GROUP BY player_id
) AS b
ON a.player_id = b.player_id
) AS tmp
WHERE rnk = 1;

-- split the answer:

select a.*,b.*
from
players as a
LEFT JOIN
( select player_id, sum(score) as score
from 
(select match_id,first_player as player_id,first_score as score
from matches
UNION all  -- does no delete the duplications
select match_id, second_player as player_id, second_score as score
from matches ) as x
group by player_id ) as b
ON a.player_id = b.player_id

-- out out the corresponding score of each player, and the player's corresponding team
-- how to deal with the NULL?

select temp.group_id, temp.player_id
from (
select a.group_id, a.player_id, ROW_NUMBER() OVER(PARTITION BY a.group_id ORDER BY IFNULL(b.score,0) DESC, a.player_id) AS rnk -- IFNULL
from
players as a
LEFT JOIN
( select player_id, sum(score) as score
from 
(select match_id,first_player as player_id,first_score as score
from matches

UNION all  -- does no delete the duplications
select match_id, second_player as player_id, second_score as score
from matches ) as x
group by player_id ) as b
ON a.player_id = b.player_id ) as temp
where rnk = 1






-- 1204. Last Person to Fit in the Elevator [Medium]

-- The maximum weight the elevator can hold is 1000.

-- Write an SQL query to find the person_name of the last person who will fit in the elevator without exceeding the weight limit. 
-- It is guaranteed that the person who is first in the queue can fit in the elevator.


WITH
tmp AS (
SELECT person_id, person_name, weight, turn,
SUM(weight) OVER(ORDER BY turn ASC) AS cum_weight
FROM Queue
),
tmp1 AS (
SELECT person_name, turn, cum_weight FROM tmp
WHERE cum_weight <= 1000
)
SELECT person_name FROM tmp1
WHERE turn >= ALL(SELECT turn FROM tmp1);





-- 1205. Monthly Transactions II [Medium]


-- Write an SQL query to find for each month and country, the number of approved transactions and their total amount, 
-- the number of chargebacks and their total amount.

WITH
tmp AS (
SELECT a.trans_id AS id, b.country, 'checkback' AS state, b.amount, a.trans_date 
FROM Chargebacks AS a
LEFT JOIN Transactions AS b
ON a.trans_id = b.id

UNION ALL
    
SELECT * FROM Transactions
WHERE state = 'approved'
)

SELECT DATE_FORMAT(trans_date, "%Y-%m") AS month, country,
SUM(CASE WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_amount,
SUM(CASE WHEN state = 'checkback' THEN 1 ELSE 0 END) AS chargeback_count,
SUM(CASE WHEN state = 'checkback' THEN amount ELSE 0 END) AS chargeback_amount
FROM tmp
GROUP BY DATE_FORMAT(trans_date, "%Y-%m"), country;







-- 1211. Queries Quality and Percentage [Easy]
-- We define query quality as: The average of the ratio between query rating and its position.

-- We also define poor_query_percentage as: The percentage of all queries with rating less than 3.

-- Write an SQL query to find each query name, the quality and poor_query_percentage.

-- Both quality and poor_query_percentage should be rounded to 2 decimal places.
-- my code
select query_name,ROUND(  avg(rating/ position),2) as quality,
ROUND( (SUM(case when rating < 3 then 1 else 0 end)/count(rating) ) * 100, 2) as poor_query_percentage
from queries
group by query_name


-- leetcode
SELECT query_name,
ROUND(AVG(rating/position),2) AS quality,
ROUND(SUM(100 * CASE WHEN rating < 3 THEN 1 ELSE 0 END)/COUNT(DISTINCT result),2) AS poor_query_percentage
FROM Queries
GROUP BY query_name;


-- 1212. Team Scores in Football Tournament [Medium]

You would like to compute the scores of all teams after all matches. Points are awarded as follows:

A team receives three points if they win a match (Score strictly more goals than the opponent team).
A team receives one point if they draw a match (Same number of goals as the opponent team).
A team receives no points if they lose a match (Score less goals than the opponent team).
Write an SQL query that selects the team_id, team_name and num_points of each team in the tournament after all described matches. Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).

 -- summarize each match conclusion
( select 
( case when host_goals > guest_goals then host_team else null end) as hostwin,
( case when host_goals <  guest_goals then guest_team else null end) as gustwin,
( case when host_goals = guest_goals then host_team else null end) as amatch,
( case when host_goals = guest_goals then guest_team else null end) as bmatch
from matches ) as tmp

-- have no idea what is the next step

-- leetcode
SELECT a.team_id, a.team_name, IFNULL(b.score,0) AS num_points 
FROM Teams AS a
LEFT JOIN (
SELECT team, SUM(score) AS score
FROM (
SELECT match_id, host_team AS team,
CASE WHEN host_goals > guest_goals THEN 3 
WHEN host_goals = guest_goals THEN 1
ELSE 0 END AS score
FROM Matches
UNION ALL
SELECT match_id, guest_team AS team,
CASE WHEN guest_goals > host_goals THEN 3 
WHEN guest_goals = host_goals THEN 1
ELSE 0 END AS score
FROM Matches
) AS tmp
GROUP BY team
) AS b
ON a.team_id = b.team
ORDER BY num_points DESC, team_id;

-- we should summarize the score according to each match
-- add 3 scores for the winner of each match

select a.team_id,a.team_name,IFNULL( b.score,0) as num_points
from Teams as a 
LEFT JOIN 
(
select team, sum(score) as score
from
(
select match_id, host_team as team, 
       ( case when host_goals > guest_goals THEN 3 
            WHEN host_goals = guest_goals THEN 1
            ELSE 0 END) as score
from matches

UNION ALL

select match_id, guest_team as team, 
       ( case when host_goals < guest_goals THEN 3 
            WHEN host_goals = guest_goals THEN 1
            ELSE 0 END) as score
from matches
) as tmp  
group by team) as b
ON a.team_id = b.team
order by num_points DESC

-- one team, the one with zero score, disappeared -- IFNULL(b.score,0)




-- 1225. Report Contiguous Dates [hard]

-- A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

-- Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.

-- period_state is 'failed' if tasks in this interval failed or 'succeeded' if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

-- Order result by start_date.

select state,date
from
( select 'failed' as state, fail_date as date
from Failed
UNION ALL
select 'succeeded' as state, success_date as date
from succeeded) as tmp
where date BETWEEN '2019-01-01' and '2019-12-31'
order by date 

-- how to write the one in the answer? pivot table?
- ，通过给记录排序得到rank，然后根据rank跟连续时间组之间的差值固定，
-- 分辨出不同组的连续数据，最后选择同组数据中最大值和最小值，作为每组数据的start_date和end_date

-- leetcode:
WITH 

t1 as (
SELECT * FROM (
(SELECT fail_date AS datelist, 'failed' AS state FROM Failed)
UNION ALL
(SELECT success_date, 'succeeded' from Succeeded)
) AS x
WHERE YEAR(datelist) = 2019
), 

t2 AS (
SELECT
datelist,
state,
CASE WHEN state = 'succeeded'  THEN DATEDIFF(datelist, '2018-12-31') - ROW_NUMBER() OVER (PARTITION BY state ORDER BY state, datelist)
WHEN state = 'failed'  THEN DATEDIFF(datelist, '2017-12-31') - ROW_NUMBER() over (PARTITION BY state ORDER BY state, datelist) 
ELSE -100 END AS group_num
FROM t1
order by datelist
)

SELECT DISTINCT
state AS period_state,
FIRST_VALUE(datelist) OVER (PARTITION BY group_num ORDER BY datelist) AS start_date,
FIRST_VALUE(datelist) OVER (PARTITION BY group_num ORDER BY datelist DESC) AS end_date
FROM t2
ORDER BY start_date;

-- it seems my code is the t1 here, following the idea shows here, update my previous code:


select state as period_state,
FIRST_VALUE(datelist) OVER (PARTITION BY group_num ORDER BY datelist) AS start_date,
FIRST_VALUE(datelist) OVER (PARTITION BY group_num ORDER BY datelist DESC) AS end_date
from (
select state,datelist,
CASE WHEN state = 'succeeded'  THEN DATEDIFF(datelist, '2018-12-31') - ROW_NUMBER() OVER (PARTITION BY state ORDER BY  datelist)
WHEN state = 'failed'  THEN DATEDIFF(datelist, '2017-12-31') - ROW_NUMBER() over (PARTITION BY state ORDER BY  datelist) -- two continuous failed dates
ELSE -100 END AS group_num
from 
( select state,datelist
from
( select 'failed' as state, fail_date as datelist
from Failed
UNION ALL
select 'succeeded' as state, success_date as datelist
from succeeded) as tp
where datelist BETWEEN '2019-01-01' and '2019-12-31') as tmp
order by datelist

) as ttp
ORDER BY start_date; 
-- my so many duplicated rows ??? 
-- can unserstand what they are doing, but I am still confused why I have so many duplicated rows - it will be okay after add ' DISTINCT' after selection




-- 1241. Number of Comments per Post [Easy]

-- Submissions may contain duplicate posts. You should treat them as one post.



-- Write an SQL query to find number of comments per each post.

-- Result table should contain post_id and its corresponding number of comments, and must be sorted by post_id in ascending order.

-- Submissions may contain duplicate comments. You should count the number of unique comments per post.

-- Submissions may contain duplicate posts. You should treat them as one post.

-- my code, too complicated
SELECT a.sub_id AS post_id, IFNULL(b.number_of_comments,0) AS
number_of_comments
from 
( SELECT DISTINCT sub_id FROM Submissions
WHERE parent_id IS NULL) as a  -- all parent post
LEFT JOIN (
SELECT DISTINCT parent_id, COUNT(DISTINCT sub_id) AS number_of_comments FROM Submissions
WHERE parent_id IS NOT NULL
GROUP BY parent_id
) AS b -- number of comments to each post
ON a.sub_id = b.parent_id
ORDER BY post_id;


-- discussion
select s1.sub_id as post_id,
    count(distinct s2.sub_id) as number_of_comments
from Submissions s1
left join Submissions s2
on s2.parent_id = s1.sub_id
where s1.parent_id is null
group by s1.sub_id



-- 1251. Average Selling Price [Easy]
-- (product_id, start_date, end_date) is the primary key for this table.
-- Each row of this table indicates the price of the product_id in the period from start_date to end_date.
-- For each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.

-- Have no idea
SELECT a.product_id, 
ROUND(SUM(b.price * a.units)/SUM(a.units), 2) AS  average_price -- must be sum(units)
FROM (
SELECT DISTINCT product_id, purchase_date, units
FROM UnitsSold
) AS a
LEFT JOIN Prices AS b
ON a.product_id = b.product_id
AND a.purchase_date BETWEEN b.start_date AND b.end_date
GROUP BY a.product_id
-- should be more familar with how two tables can be combined 



-- 1264. Page Recommendations [Medium]

-- Write an SQL query to recommend pages to the user with user_id = 1 using the pages that your friends liked. 
-- It should not recommend pages you already liked.

-- Return result table in any order without duplicates.

-- first find user_id = 1's friend

-- my code:
select DISTINCT likes.page_id as recommended_page
from 
( select user1_id as user1_friend
from friendship
where user2_id = 1
UNION
select user2_id as user1_friend
from friendship
where user1_id = 1) as tmp
JOIN
likes
On tmp.user1_friend = likes.user_id
where likes.page_id NOT IN
(select page_id
from likes
where user_id = 1 )
order by recommended_page

-- leetcode:
SELECT DISTINCT b.page_id AS recommended_page FROM (
SELECT user2_id AS user_id FROM Friendship
WHERE user1_id = 1
UNION
SELECT user1_id AS user_id FROM Friendship
WHERE user2_id = 1
) AS a
JOIN Likes AS b
ON a.user_id = b.user_id
AND b.page_id NOT IN (SELECT page_id FROM Likes WHERE user_id = 1)
ORDER BY b.page_id;




-- 1270. All People Report to the Given Manager [Medium]
-- Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.
-- The indirect relation between managers will not exceed 3 managers as the company is small.
-- Return result table in any order without duplicates.

select employee_id
from employees 
where manager_id = 1 and employee_id <> 1
UNION
select employee_id
from employees
where manager_id IN 
( select employee_id
from employees 
where manager_id = 1 and employee_id <> 1) 
UNION 
select employee_id 
from employees
where manager_id  IN
(
select employee_id
from employees
where manager_id IN 
( select employee_id
from employees 
where manager_id = 1 and employee_id <> 1) 
)



-- 1280. Students and Examinations [Easy]

-- Write an SQL query to find the number of times each student attended each exam.
-- Order the result table by student_id and subject_name.

--- my answer WRONG!!!!!!!!!
select students.student_id,students.student_name, Examinations.subject_name, IFNULL(count(Examinations.student_id),0) as attended_exams
from students LEFT JOIN Examinations 
On students.student_id = Examinations.student_id
LEFT JOIN Subjects ON Subjects.subject_name = Examinations.subject_name
group by students.student_id, Examinations.subject_name,students.student_name
-- wrong. cannot show Alex (never attend exam). I have already used the left joint and ifnull clause

-- needs to update to CROSS JOIN

select students.student_id,students.student_name, Subjects.subject_name, count(Examinations.student_id) as attended_exams
from students  
LEFT JOIN Examinations  On students.student_id = Examinations.student_id
CROSS JOIN Subjects 
group by students.student_id,students.student_name,Subjects.subject_name


-- 1285. Find the Start and End Number of Continuous Ranges [Medium]
-- Since some IDs have been removed from Logs. Write an SQL query to find the start and end number of continuous ranges in table Logs.

-- Order the result table by start_id.

select DISTINCT First_Value (log_id) over (partition by rk order by log_id) as start_id,
First_value(log_id) over (partition by rk order by log_id DESC) as end_id
from
(select log_id,log_id - row_number() over() as rk
from Logs ) as a

-- 1294. Weather Type in Each Country [Easy]

-- Write an SQL query to find the type of weather in each country for November 2019.
-- The type of weather is Cold if the average weather_state is less than or equal 15, 
-- Hot if the average weather_state is greater than or equal 25 and Warm otherwise.


select a.country_name,
( CASE WHEN b.avgtemp <= 15 Then 'Cold'
	   When b.avgtemp >= 25 Then 'Hot'
		 ELSE 'Warm' END )  as Type
from 
Countries as a
JOIN
(
SELECT country_id, avg(weather_state) as avgtemp
FROM Weather
WHERE day BETWEEN "2019-11-01" AND "2019-11-30"
group by country_id) as b
Where a.country_id = b.country_id




-- 1303. Find the Team Size [Easy]
-- Write an SQL query to find the team size of each of the employees.
-- Return result table in any order.
-- !1 a very classic question. If we want to sum something through a group which we don't want to group by, what should we do
select a.employee_id,b.team_size
from
employee as a 
LEFT JOIN
( select team_id, count(employee_id) as team_size
from employee
group by team_id) as b
ON a.team_id = b.team_id

-- LEETCode (much simpler)
select employee_id, count(employee_id) over (partition by team_id) as team_size
from employee
order by employee_id








