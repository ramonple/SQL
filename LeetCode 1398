1398. Customers Who Bought Product A and B but Not C [Medium]

-- Write an SQL query to report the customer_id and customer_name of customers who bought products 
-- "A", "B" but did not buy the product "C" since we want to recommend them buy this product.
-- Return the result table ordered by customer_id.

-- my answer
select  DISTINCT Customers.customer_name, Customers.customer_id
from Customers JOIN orders On Customers.customer_id = Orders.customer_id
where customers.customer_id IN (
select customer_id 
from Orders 
where product_name = 'A' )
AND customers.customer_id IN (
select customer_id 
from Orders 
where product_name ='B')
AND customers.customer_id NOT IN
(
select customer_id 
from Orders 
where product_name = 'C')

-- leetcode
SELECT c.customer_id, c.customer_name
FROM customers AS c
WHERE EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'A')
AND EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'B')
AND NOT EXISTS(SELECT * FROM orders WHERE customer_id = c.customer_id AND product_name = 'C')
ORDER BY c.customer_id;

-- 1407. Top Travellers [Easy]
-- Write an SQL query to report the distance travelled by each user.
-- Return the result table ordered by travelled_distance in descending order, 
-- if two or more users travelled the same distance, order them by their name in ascending order.

SELECT a.name, IFNULL(SUM(b.distance), 0) as travelled_distance -- NOTICE: IFNULL
FROM Users AS a
LEFT JOIN Rides AS b ON a.id = b.user_id
GROUP BY a.name
order by travelled_distance DESC,a.name


-- 1412. Find the Quiet Students in All Exams [Hard]

-- A "quite" student is the one who took at least one exam and didn't score neither the high score nor the low score.

-- Write an SQL query to report the students (student_id, student_name) being "quiet" in ALL exams.

-- Don't return the student who has never taken any exam. Return the result table ordered by student_id.


select student_id, student_name
from student
where student_id NOT IN (
select distinct student_id
from
( select  student_id, rank() over (partition by exam_id order by score) as rk
from Exam) as bottom
where bottom.rk=1) 
AND student_id NOT IN (
select distinct student_id
from
( select  student_id, rank() over (partition by exam_id order by score DESC) as rp
from Exam) as top
where top.rp=1)
AND student_id IN 
(
select student_id
from Exam
group by student_id
having count(student_id) > 0 ) 

--leetcode
WITH

tmp AS (
SELECT exam_id, student_id, score,
MAX(score) OVER(PARTITION BY exam_id) AS max_score,
MIN(score) OVER(PARTITION BY exam_id) AS min_score
FROM Exam
),

tmp1 AS (
SELECT DISTINCT a.student_id, a.student_name FROM Student AS a
JOIN tmp AS b
ON a.student_id = b.student_id
WHERE b.score = b.max_score OR b.score = b.min_score

)

SELECT DISTINCT a.student_id, a.student_name FROM Student AS a
JOIN Exam AS b
ON a.student_id = b.student_id
WHERE a.student_id NOT IN (SELECT student_id FROM tmp1)
ORDER BY a.student_id;

